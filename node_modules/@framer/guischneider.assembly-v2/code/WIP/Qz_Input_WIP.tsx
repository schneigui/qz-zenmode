import * as React from "react"
import {
    Frame,
    addPropertyControls,
    ControlType,
    PropertyControls,
} from "framer"
// import { qzYellow, qzCoral, qzInk, qzTeal, qzWhite } from "../Assembly"
import styled from "styled-components"

const qzYellow = "#FFCD1F"
const qzInk = "#455358"
const qzWhite = "#FCFCFC"
const qzTeal = "#3CCFCF"
const qzCoral = "#FF725B"

interface Props {
    onValueChange: (value: string) => void
    value: string
    placeholder: string
    label: string
    inputType: string
    border: string
    borderFocus: string
    height: 65
    txtColor: string
}

interface State {
    value: string
    valueFromProps: string
}

export class Qz_Input_NEW extends React.Component<Partial<Props>, State> {
    constructor(props) {
        super(props)

        this.UIInputContainer = styled.div`
            cursor: pointer;
            display: block;
            font-weight: 400;
            font-size: 1.125rem;
            line-height: 1.222222222222222;
        `
        this.UIInput = styled.input`
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background-color: transparent;
            border: none;
            border-radius: 0;
            box-shadow: none;
            color: ${props.txtColor};
            cursor: text;
            -webkit-flex: 1 1 auto;
            -ms-flex: 1 1 auto;
            flex: 1 1 auto;
            font-family: Avenir;
            font-size: 18px;
            letter-spacing: inherit;
            line-height: inherit;
            outline: none;
            padding-bottom: 0.375rem;
            text-align: inherit;
            white-space: pre-wrap;
            width: 100%;
            word-break: break-word;
            box-shadow: inset 0 -2px 0 0 ${props.border};
            transition: all 120ms cubic-bezier(0.47, 0, 0.745, 0.715);
            &:focus{
            box-shadow: inset 0 -4px 0 0 ${props.borderFocus};
            }
            &[disabled] {
                        pointer-events: none;
                        opacity: .5;
                    }
        `
        this.UIInputLabel = styled.span`
            color: #97a5aa;
            display: block;
            margin-top: 0.625rem;
            text-align: inherit;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.0625rem;
            line-height: 1.333333333333333;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        `
        this.state = {
            value: props.value,
            valueFromProps: props.value,
        }
    }
    // Allow setting the Value from within the property panel.
    static getDerivedStateFromProps(props: Props, state: State) {
        if (props.value !== state.valueFromProps) {
            return { value: props.value, valueFromProps: props.value }
        }
    }
    static defaultProps = {
        label: "label",
        inputType: "text",
        placeholder: "Enter Answer",
        value: "Enter Answer",
        border: qzInk,
        borderFocus: qzYellow,
        height: 65,
        txtColor: qzInk,
        onValueChange: () => {},
    }
    // Add Property Controls
    static propertyControls: PropertyControls<Props> = {
        value: {
            title: "Value",
            type: ControlType.String,
            defaultValue: "Enter Value",
        },
        label: {
            title: "Label",
            type: ControlType.String,
            defaultValue: "Label",
        },
        placeholder: {
            title: "Placeholder",
            type: ControlType.String,
            defaultValue: "Enter Answer",
        },
        inputType: {
            title: "Type",
            type: ControlType.Enum,
            defaultValue: "text",
            options: ["text", "number", "password"],
            optionTitles: ["text", "number", "password"],
        },
        border: {
            title: "border",
            type: ControlType.Color,
        },
    }
    handleInputChange = e => {
        // e.preventDefault()
        // console.log(e)
        const value = e.nativeEvent.target.value
        this.props.onValueChange(value)
        this.setState({ value })
    }
    render() {
        const UIInputContainer = this.UIInputContainer
        const UIInput = this.UIInput
        const UIInputLabel = this.UIInputLabel

        return (
            <UIInputContainer>
                <UIInput
                    type={this.props.inputType}
                    value={this.state.value}
                    onChange={this.handleInputChange}
                    placeholder={this.props.placeholder}
                />
                <UIInputLabel>{this.props.label}</UIInputLabel>
            </UIInputContainer>
        )
    }
}
