import * as React from "react"
import { PropertyControls, ControlType } from "framer"
import styled from "styled-components"
import { StyleSheet, css } from "aphrodite"

// Based upon Benjamin den Boer's Input Component
// https://store.framer.com/package/benjamin/input

interface Props {
    styleSet: string
    disabledInput: boolean
    disabledOpacity: number
    fullHeight: boolean
    fullWidth: boolean
    value: string
    onValueChange: (value: string) => void
    placeholder: string
    fontSize: number
    fontWeight: string
    customFont: boolean
    customFontFamily: string
    textColor: string
    placeholderColor: string
    paddingPerFontSize: boolean
    paddingPerSide: boolean
    paddingNaturalFactor: number
    padding: number
    paddingTop: number
    paddingRight: number
    paddingBottom: number
    paddingLeft: number
    borderWidth: number
    borderColor: string
    borderColorHover: string
    borderColorFocus: string
    borderRadius: number
    useBackground: boolean
    bgColor: string
    bgColorHover: string
    bgColorFocus: string
    transitionSpeed: number
    textarea: boolean
    textareaLineHeight: number
    textareaRows: number
    textareaCols: number
    password: boolean
    tabIndex: number
    border: number
}

interface State {
    value: string
    valueFromProps: string
}

export class InputSchneider extends React.Component<Partial<Props>, State> {
    static defaultProps = {
        // UI Control Groups
        styleSet: "1",
        // Disabled?
        disabledInput: false,
        disabledOpacity: 0.6,
        // Size
        width: 240,
        height: 48,
        fullWidth: true,
        fullHeight: true,
        // Text
        fontSize: 16,
        fontWeight: "400",
        customFont: false,
        value: "",
        textColor: "#000",
        placeholder: "Placeholder…",
        placeholderColor: "#999",
        // Padding
        paddingPerFontSize: true,
        paddingPerSide: true,
        paddingNaturalFactor: 1,
        padding: 16,
        paddingTop: 12,
        paddingRight: 16,
        paddingBottom: 12,
        paddingLeft: 16,
        // Border
        border: 2,
        borderWidth: 1,
        borderColor: "rgba(0,0,0,0.2)",
        borderRadius: 2,
        borderColorHover: "#09F",
        borderColorFocus: "#06F",
        // Background
        useBackground: true,
        bgColor: "#FFF",
        bgColorHover: "#FFF",
        bgColorFocus: "#FFF",
        // Transition
        transitionSpeed: 0.2,
        // Variants
        textarea: false,
        textareaLineHeight: 1.5,
        textareaRows: 5,
        textareaCols: 25,
        password: false,
        // Misc
        tabIndex: 0,
    }

    static propertyControls: PropertyControls<Props> = {
        // disabledInput: {
        //     type: ControlType.Boolean,
        //     title: "Disabled",
        //     enabledTitle: "Yes",
        //     disabledTitle: "No",
        // },
        // disabledOpacity: {
        //     type: ControlType.Number,
        //     title: ".   opacity",
        //     min: 0,
        //     max: 1,
        //     step: 0.1,
        //     hidden: props => props.disabledInput == false,
        // },
        // textarea: {
        //     type: ControlType.Boolean,
        //     title: "Text Area",
        //     enabledTitle: "Yes",
        //     disabledTitle: "No",
        //     hidden: props => props.password == true,
        // },
        // password: {
        //     type: ControlType.Boolean,
        //     title: "Password",
        //     enabledTitle: "Yes",
        //     disabledTitle: "No",
        //     hidden: props => props.textarea == true,
        // },
        // styleSet: {
        //     type: ControlType.Enum,
        //     title: "Settings",
        //     options: ["1", "2"],
        //     optionTitles: ["** Content **", "** Input **"],
        // },
        // fontSize: {
        //     type: ControlType.Number,
        //     title: ".   size",
        //     min: 1,
        //     unit: "px",
        //     hidden: props => props.styleSet !== "1",
        // },
        // fontWeight: {
        //     type: ControlType.Enum,
        //     title: ".   weight",
        //     options: [
        //         "100",
        //         "200",
        //         "300",
        //         "400",
        //         "500",
        //         "600",
        //         "700",
        //         "800",
        //         "900",
        //     ],
        //     // optionTitles: ["Thin", "Extra Light", "Light", "Normal", "Medium", "Semi Bold", "Bold", "Extra Bold", "Heavy"]
        //     hidden: props => props.styleSet !== "1",
        // },
        // textareaLineHeight: {
        //     type: ControlType.Number,
        //     title: ".   leading",
        //     min: 0,
        //     max: 10,
        //     step: 0.1,
        //     hidden: props => props.styleSet !== "1" || props.textarea == false,
        // },
        // customFont: {
        //     type: ControlType.Boolean,
        //     title: ".   font",
        //     enabledTitle: "Custom",
        //     disabledTitle: "System",
        //     hidden: props => props.styleSet !== "1",
        // },
        // customFontFamily: {
        //     type: ControlType.String,
        //     title: ".   fontstack",
        //     hidden: props =>
        //         props.styleSet !== "1" || props.customFont == false,
        // },
        value: {
            type: ControlType.String,
            title: "Value",
            // hidden: props => props.styleSet !== "1",
        },
        border: {
            type: ControlType.Number,
            title: "Border",
            min: 0,
            max: 10,
            step: 0.1,
        },
        // textColor: {
        //     type: ControlType.Color,
        //     title: ".   color",
        //     hidden: props => props.styleSet !== "1",
        // },
        // placeholder: {
        //     type: ControlType.String,
        //     title: "Default",
        //     hidden: props => props.styleSet !== "1",
        // },
        // placeholderColor: {
        //     type: ControlType.Color,
        //     title: ".   color",
        //     hidden: props => props.styleSet !== "1",
        // },
        // fullWidth: {
        //     type: ControlType.Boolean,
        //     title: "Width",
        //     enabledTitle: "100%",
        //     disabledTitle: "Natural",
        //     hidden: props => props.styleSet !== "2",
        // },
        // textareaCols: {
        //     type: ControlType.Number,
        //     title: ".   cols",
        //     min: 1,
        //     hidden: props =>
        //         props.styleSet !== "2" ||
        //         props.textarea == false ||
        //         props.fullWidth == true,
        // },
        // fullHeight: {
        //     type: ControlType.Boolean,
        //     title: "Height",
        //     enabledTitle: "100%",
        //     disabledTitle: "Natural",
        //     hidden: props => props.styleSet !== "2",
        // },
        // textareaRows: {
        //     type: ControlType.Number,
        //     title: ".   rows",
        //     min: 1,
        //     hidden: props =>
        //         props.styleSet !== "2" ||
        //         props.textarea == false ||
        //         props.fullHeight == true,
        // },
        // paddingPerFontSize: {
        //     type: ControlType.Boolean,
        //     title: "Padding",
        //     enabledTitle: "Font Size",
        //     disabledTitle: "Literal",
        //     hidden: props =>
        //         props.styleSet !== "2" ||
        //         (props.fullWidth == true && props.fullHeight == true),
        // },
        // paddingNaturalFactor: {
        //     type: ControlType.Number,
        //     title: ".   factor",
        //     step: 0.1,
        //     unit: "em",
        //     hidden: props =>
        //         props.styleSet !== "2" ||
        //         props.paddingPerFontSize == false ||
        //         (props.fullWidth == true && props.fullHeight == true),
        // },
        // padding: {
        //     type: ControlType.FusedNumber,
        //     title: ".   offsets",
        //     toggleKey: "paddingPerSide",
        //     toggleTitles: ["All Sides", "Per Side"],
        //     valueKeys: [
        //         "paddingTop",
        //         "paddingRight",
        //         "paddingBottom",
        //         "paddingLeft",
        //     ],
        //     valueLabels: ["T", "R", "B", "L"],
        //     min: 0,
        //     hidden: props =>
        //         props.styleSet !== "2" ||
        //         props.paddingPerFontSize == true ||
        //         (props.fullWidth == true && props.fullHeight == true),
        // },
        // borderWidth: {
        //     type: ControlType.Number,
        //     title: "Border",
        //     min: 0,
        //     max: 6,
        //     unit: "px",
        //     displayStepper: true,
        //     hidden: props => props.styleSet !== "2",
        // },
        // borderColor: {
        //     type: ControlType.Color,
        //     title: ".   default",
        //     hidden: props => props.styleSet !== "2" || props.borderWidth <= 0,
        // },
        // borderColorHover: {
        //     type: ControlType.Color,
        //     title: ".   hover",
        //     hidden: props => props.styleSet !== "2" || props.borderWidth <= 0,
        // },
        // borderColorFocus: {
        //     type: ControlType.Color,
        //     title: ".   focus",
        //     hidden: props => props.styleSet !== "2" || props.borderWidth <= 0,
        // },
        // borderRadius: {
        //     type: ControlType.Number,
        //     title: ".   radius",
        //     unit: "px",
        //     min: 0,
        //     displayStepper: true,
        //     hidden: props => props.styleSet !== "2",
        // },
        // useBackground: {
        //     type: ControlType.Boolean,
        //     title: "Background",
        //     enabledTitle: "Yes",
        //     disabledTitle: "No",
        //     hidden: props => props.styleSet !== "2",
        // },
        // bgColor: {
        //     type: ControlType.Color,
        //     title: ".   default",
        //     hidden: props =>
        //         props.styleSet !== "2" || props.useBackground == false,
        // },
        // bgColorHover: {
        //     type: ControlType.Color,
        //     title: ".   hover",
        //     hidden: props =>
        //         props.styleSet !== "2" || props.useBackground == false,
        // },
        // bgColorFocus: {
        //     type: ControlType.Color,
        //     title: ".   focus",
        //     hidden: props =>
        //         props.styleSet !== "2" || props.useBackground == false,
        // },
        // transitionSpeed: {
        //     type: ControlType.Number,
        //     title: "Transition",
        //     min: 0,
        //     max: 6,
        //     step: 0.1,
        //     unit: "s",
        //     hidden: props => props.styleSet !== "2",
        // },
        // tabIndex: {
        //     type: ControlType.Number,
        //     title: "Tab Index",
        //     displayStepper: true,
        //     hidden: props => props.styleSet !== "2",
        // },
    }

    state = {
        value: InputSchneider.defaultProps.value,
        valueFromProps: InputSchneider.defaultProps.value,
    }

    // Allow setting the Value from within the property panel.
    static getDerivedStateFromProps(props: Props, state: State) {
        if (props.value !== state.valueFromProps) {
            return { value: props.value, valueFromProps: props.value }
        } else {
            return null
        }
    }

    onChange = (event: React.ChangeEvent) => {
        const element = this.props.textarea
            ? (event.nativeEvent.target as HTMLTextAreaElement)
            : (event.nativeEvent.target as HTMLInputElement)

        const value = element.value

        this.setState({ value })

        if (this.props.onValueChange) {
            this.props.onValueChange(value)
        }
    }

    StyledInput = this.props.textarea

    render() {
        const {
            textarea,
            textareaCols,
            textareaRows,
            fullHeight,
            disabledInput,
            placeholder,
            textColor,
            fontSize,
            borderRadius,
            paddingPerFontSize,
            paddingPerSide,
            paddingNaturalFactor,
            padding,
            paddingTop,
            paddingRight,
            paddingBottom,
            paddingLeft,
            borderColor,
            borderWidth,
            password,
            tabIndex,
            border,
        } = this.props

        const { value } = this.state
        return (
            <label className={css(styles.UIInput)}>
                <div className={css(styles.UIInputContent)}>
                    <input
                        onChange={this.onChange}
                        value={value}
                        placeholder={placeholder}
                        disabled={disabledInput ? disabledInput : disabledInput}
                        style={{
                            width: this.props.fullWidth ? "100%" : "auto",
                            height: this.props.fullHeight ? "100%" : "auto",
                            fontSize: fontSize,
                            // fontFamily: this.props.customFont
                            //     ? this.props.customFontFamily
                            //     : "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
                            color: textColor,
                            // padding: paddingValue,
                            borderRadius: borderRadius,
                            backgroundColor: this.props.useBackground
                                ? this.props.bgColor
                                : "transparent",
                            boxShadow: `inset 0 0 0 ${borderWidth}px ${borderColor}`,
                        }}
                        className={css(styles.UIInputInput)}
                        // type={props.inputType}
                        // value={props.value}
                    />
                    <span
                        className={css(styles.UIInputBorder)}
                        style={{
                            boxShadow: `inset 0 ${border}px 0 0 #455358`,
                        }}
                    />
                </div>
                <span className={css(styles.UIInputLabel)}>Hello</span>
            </label>
        )
    }
}

// const style: React.CSSProperties = {
//     border: "none",
//     outline: "none",
//     resize: "none",
// }
const styles = StyleSheet.create({
    UIInput: {
        cursor: "pointer",
        display: "block",
        fontWeight: 400,
        fontSize: "1.125rem",
        lineHeight: 1.2,
        fontFamily: "Avenir",
    },
    UIInputContent: {
        WebkitAlignItems: "flex-start",
        alignItems: "flex-start",
        display: "flex",
        WebkitFlexFlow: "row wrap",
        flexFlow: "row wrap",
        position: "relative",
        width: "100%",
    },
    UIInputInput: {
        WebkitAppearance: "none",
        MozAppearance: "none",
        appearance: "none",
        backgroundColor: "transparent",
        border: "none",
        borderRadius: "0",
        boxShadow: "none",
        color: "#2d3639",
        cursor: "text",
        WebkitFlex: "1 1 auto",
        flex: "1 1 auto",
        font: "inherit",
        letterSpacing: "inherit",
        lineHeight: "inherit",
        outline: "none",
        paddingBottom: "0.375rem",
        textAlign: "inherit",
        whiteSpace: "pre-wrap",
        width: "100%",
        wordBreak: "break-word",
    },
    UIInputBorder: {
        WebkitAlignSelf: "flex-end",
        alignSelf: "flex-end",
        display: "block",
        height: "0.5rem",
        // boxShadow: "0 0.25rem 0 0 #455358",
        transition: "all 120ms cubic-bezier(0.47,0,0.745,0.715)",
        width: "100%",
        overflow: "visible",
    },
    UIInputLabel: {
        color: "#97a5aa",
        display: "block",
        marginTop: "0.625rem",
        textAlign: "inherit",
        fontWeight: 600,
        textTransform: "uppercase",
        fontSize: "0.75rem",
        letterSpacing: "0.0625rem",
        lineHeight: "1.33",
        WebkitUserSelect: "none",
        MozUserSelect: "none",
        userSelect: "none",
    },
})
